Int 0

#include "m8def.inc"

.org 0 
rjmp reset ; on reset, program starts here

.org 0x0000; // Low Level Triggered INT0
rjmp int0_ISR;

.org 0x0100;

reset:
        LDI R16,0x70 ; setup the stack pointer to point to address 0x0070
        OUT SPL,R16 ; The value of PC Value will be pushed to Stack Pointer when interrupt is called
        LDI R16,0x00;
        OUT SPH,R16;

        LDI R16,0x01;
        OUT DDRB,R16;

        LDI R16,0x00;
        OUT DDRD,R16;

        IN R16, MCUCR; 
        ORI R16, 0x00;
        OUT MCUCR, R16;

        IN R16, GICR; Load GICR register
        ORI R16, 0x40;
        OUT GICR, R16;

        LDI R16, 0x00;
        OUT PORTB, R16;

        SEI;

ind_loop:
    RJMP ind_loop;

int1_ISR:
    IN R16, SREG;
    PUSH R16;

    LDI R16, 0x0A;
    MOV R0, R16;

    c1: LDI R16, 0x01;
    OUT PORTB, R16

    LDI R16, 0xFF
    a1: LDI R17, 0xFF
    a2: DEC R17
    BRNE a2
    DEC R16
    BRNE a1

    LDI R16, 0x00
    OUT PORTB, R16

    LDI R16, 0xFF
    b1: LDI R17, 0xFF
    b2: DEC R17
    BRNE b2
    DEC R16
    BRNE b1

    DEC R0
    BRNE c1
    POP R16
    OUT SREG, R16

    RETI




Int 0 c

#define F_CPU 1000000

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR (INT0_vect)
{

 for(int i=0; i<10; i=i+1)
 {
  //PortB is set to 1 for 1 sec (ON State)
  PORTB = 0x01;
  _delay_ms(1000);
  //PortB is set to 0 for 1 sec (ON State)
  PORTB = 0x00;
  _delay_ms(1000);
 }
}

int main (void)
{
 //port i/o declarations
 DDRD = 0x00;
 DDRB = 0x01;
 MCUCR = 0x00;
 GICR = 0x40;
 PORTB = 0x00;

 //set interrupt flag of SREG
 sei();

 while (1)
 {
  //To keep the program running forever.
 }
}